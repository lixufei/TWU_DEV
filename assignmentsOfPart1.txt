Assignment 1: Some global selections

After watching those videos and reading the arcticles, did you learn anything? If so, what? Was there something you disagreed with?

Please upload a text file with your response in 50-100 words.

(*Note: Feel free to go a bit longer if you really want to do so.)






Assignment 2: Biblioteca Release 1

Business Case

The Bangalore Public Library has approached us to design and implement a Library Management System for them. Based on their requirements, we have decided to develop a new system named Biblioteca. Since the library has a large list of requirements, we will be making multiple releases of Biblioteca, with each release incrementally adding more functionality. 

In order to easily add more functionality in the future as well as maintain a high level of quality, Biblioteca will be built using a test driven approach.

The requirements for the first release of Biblioteca are given below.

User Stories
◦Welcome Message  - As a customer, I would like to see a welcome message when I start the application, so that I feel welcome and know that Biblioteca is available.
◦List Books - As a customer, after the welcome message appears I would like to see a list of all library books, so that I can browse for books I might want to check-out. Assume that there is a pre-existing list of books. You don't need to support adding or removing books from the library.
◦Book Details - As a customer, I'd like the list of all books to include each books Author and Year Published, so that I can be confident that I have found the book I am looking for. The book listing should have columns for this information.
◦Main Menu  - As a customer, instead of automatically seeing the book list, I would like to see a list of options and be able to choose one. For now, the only option should be 'List Books'. All future options should be added to this menu also.
◦Invalid Menu Option - As a customer, I would like to be notified when I choose an invalid option with the message “Select a valid option!”, so that I can know when I need to re-enter my choice.
◦Quit - As a customer, I would like to continue choosing options until I choose to 'Quit'.
◦Checkout Book - As a librarian, I would like customers to be able to check-out a book. Checked out books should not appear in the list of all library books.
◦Successful Checkout - As a customer, I would like to know that a book has been checked out by seeing the message “Thank you! Enjoy the book”.
◦Unsuccessful Checkout - As a customer, I would like to be notified if the book I tried to check-out is not available by seeing the message, “That book is not available.”, so that I know that I need to select a different book or fix my spelling error.
◦Return Book - As a librarian, I would like customers to be able to return a book, so that other customers can check that book out. Returned books should appear in the list of library books.
◦Successful Return - As a customer, I would like to be notified if the book I am returning belongs to this library by seeing the message, “Thank you for returning the book.”, so that I know I returned the book to the right library.
◦Unsuccessful Return - As a customer, I would like to be notified if the book I am returning has not been added to this library by seeing the message, “That is not a valid book to return.”, so that I can return it to the correct library or fix my spelling error.

Technical Requirements
◦All the code must be developed using TDD.
◦Biblioteca needs to be a console application. Use your own imagination for any UI elements
◦We do not need a database for this release.

Assignment Setup
◦Download and extract the Biblioteca skeleton code.
◦Follow the instructions in the included README file to create your project on GitHub. 
◦Use TDD to write code that fulfills the requirements for Biblioteca.
◦Make sure you keep commiting your code changes to your GitHub repository frequently.

You are encourged to use the internet to further your learning, as well as to solve any issues you run into. If the internet is not providing you what you need, reach out to your GEL. They are here to provide feedback and support in order to accelerate your learning.

Submission Guidelines

For this assignment, you need to submit the URL of your GitHub repository, as well as the git commit number that you want reviewed. To submit, click the 'Add Submission' button at the bottom of this page, and enter this information into the textbox that appears.

The GEL will check out code from your repository, evaluate it, and give you feedback. Once you receive your feedback, revisit the assignment and make the recommended changes. 










Assignment 3: Introductory programming exercises



Triangle Exercises

Easiest exercise ever

Print one asterisk to the console.
Example:
*

Draw a horizontal line

Given a number n, print n asterisks on one line.
Example when n=8:
********

Draw a vertical line

Given a number n, print n lines, each with one asterisks
Example when n=3:
*
*
*

Draw a right triangle

Given a number n, print n lines, each with one more asterisk than the last (i.e. one on the first line, two on the second,etc.) 
Example when n=3:
*
**
***

Diamond Exercises

Isosceles Triangle

Given a number n, print a centered triangle. Example for n=3:
  *
 ***
*****


Diamond

Given a number n, print a centered diamond. Example for n=3:

  *
 ***
*****
 ***
  *


Diamond with Name

Given a number n, print a centered diamond with your name in place of the middle line. Example for n=3:

  *
 ***
Bill
 ***
  *

FizzBuzz Exercise

FizzBuzz is a simple number game where you count, but say "Fizz" and/or "Buzz" instead of numbers adhering to certain rules.

Create a FizzBuzz() method that prints out the numbers 1 through 100.
Instead of numbers divisible by three print "Fizz".
Instead of numbers divisible by five print "Buzz".
Instead of numbers divisible by three and five print "FizzBuzz".

Sample Output:
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz

Prime Factors Exercise

Write a method generate(int n) that given an integer N will return a list of integers such that the numbers are the factors of N and are arranged in increasing numerical order.

For example, generate(1) should return an empty list and generate(30) should return the numbers: 2,3,5.
